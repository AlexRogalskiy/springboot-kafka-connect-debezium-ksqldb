CREATE STREAM "articles_src" WITH (KAFKA_TOPIC='mysql.researchdb.articles', VALUE_FORMAT='AVRO', PARTITIONS=5);
CREATE STREAM "articles_src_rekey" WITH (PARTITIONS=5) AS SELECT * FROM "articles_src" PARTITION BY ID;

CREATE STREAM "reviews_src" WITH (KAFKA_TOPIC='mysql.researchdb.reviews', VALUE_FORMAT='AVRO', PARTITIONS=5);
CREATE STREAM "reviews_src_rekey" WITH (PARTITIONS=5) AS SELECT * FROM "reviews_src" PARTITION BY ID;

-- This select statement is simply to make sure that we have time for the "researchers_institutes" topic
-- to be created before we define a table against it (https://github.com/confluentinc/ksql/issues/1394)
-- NOTE: it doesn't work
-- SELECT * FROM "researchers_institutes" LIMIT 1;

CREATE TABLE "researchers_institutes_table" (ROWKEY BIGINT KEY, researcher_id BIGINT, researcher_first_name VARCHAR, researcher_last_name VARCHAR, institute_id BIGINT, institute_name VARCHAR) WITH (KAFKA_TOPIC='researchers_institutes', VALUE_FORMAT='AVRO', KEY='researcher_id', PARTITIONS=5);
CREATE TABLE "articles_table" (ROWKEY BIGINT KEY, id BIGINT, title VARCHAR, created_at BIGINT, updated_at BIGINT) WITH (KAFKA_TOPIC='articles_src_rekey', VALUE_FORMAT='AVRO', KEY='id', PARTITIONS=5);
CREATE STREAM "reviews_stream" (id BIGINT, comment VARCHAR, created_at BIGINT, updated_at BIGINT, article_id BIGINT, researcher_id BIGINT) WITH (KAFKA_TOPIC='reviews_src_rekey', VALUE_FORMAT='AVRO', PARTITIONS=5);

CREATE STREAM "reviews_researchers_institutes" WITH (PARTITIONS=5) AS SELECT A.id AS review_id, A.article_id AS article_id, B.researcher_id AS reviewer_id, B.researcher_first_name AS reviewer_first_name, B.researcher_last_name AS reviewer_last_name, B.institute_id AS institute_id, B.institute_name AS institute_name, A.comment AS comment, A.created_at AS created_at FROM "reviews_stream" A LEFT JOIN "researchers_institutes_table" B ON A.researcher_id = B.researcher_id PARTITION BY A.id;
CREATE STREAM "reviews_researchers_institutes_articles" WITH (PARTITIONS=5) AS SELECT A.review_id AS review_id, B.id AS article_id, B.title AS article_title, A.reviewer_id AS reviewer_id, A.reviewer_first_name AS reviewer_first_name, A.reviewer_last_name AS reviewer_last_name, A.institute_id AS institute_id, A.institute_name AS institute_name, A.comment AS comment, A.created_at AS created_at FROM "reviews_researchers_institutes" A LEFT JOIN "articles_table" B ON A.article_id = B.id PARTITION BY A.review_id;
